"""
Django settings for CMR project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import sys
from email.utils import parseaddr
from pathlib import Path

import environ

SITE_ID = 1

# Set up `env` object
env = environ.Env(DEBUG=(bool, False))  # Set casting and default value
# fmtoff
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read environment variables from `.env` file
try:
    command = sys.argv[1]
except IndexError:
    command = 'help'

if command != 'test':
    environ.Env.read_env(BASE_DIR / '.env')

# False if not in os.environ because of casting above
DEBUG = env('DEBUG')

# Raises Django's ImproperlyConfigured
# exception if SECRET_KEY not in os.environ
#
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# NOTE: How to Secure Your Django App â€“ Best Practices and Code Examples
# https://www.freecodecamp.org/news/how-to-secure-your-django-app/
# https://dev.to/topunix/building-a-fort-django-security-best-practices-4fa4

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# Parse database connection url strings
# like psql://user:pass@127.0.0.1:8458/db
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    # Read os.environ['DATABASE_URL'] and raise
    # ImproperlyConfigured exception if not found
    #
    # The db() method is an alias for db_url().
    'default': env.db(),
    # Read os.environ['SQLITE_URL']
    'extra': env.db_url('SQLITE_URL', default='sqlite:////tmp/my-tmp-sqlite.db'),
}

# TODO -- NEED TO CONFIGURE CACHE!!!
# CACHES = {
#     # Read os.environ['CACHE_URL'] and raises
#     # ImproperlyConfigured exception if not found.
#     #
#     # The cache() method is an alias for cache_url().
#     'default': env.cache(),

#     # Read os.environ['REDIS_URL']
#     'redis': env.cache_url('REDIS_URL')
# }


CMS_CONFIRM_VERSION4 = True  # Required by `django-cms`

ALLOWED_HOSTS = []

# 'allauth' settings
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition
INSTALLED_APPS = [
    # 'djangocms_admin_style',                                            # Required by `django-cms`
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_extensions',
    'imagekit',
    # -- 'allauth' apps ---------------
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.openid',
    # -- 'django-cms' apps ------------
    'cms',
    'menus',
    'treebeard',
    'sekizai',
    'djangocms_versioning',
    'djangocms_alias',
    'filer',
    'easy_thumbnails',
    'djangocms_file',
    'djangocms_picture',
    'djangocms_video',
    'djangocms_googlemap',
    'djangocms_snippet',
    'djangocms_style',
    'djangocms_text_ckeditor',
    # ---------------------------------
    'blog',
    'events',
    'home',
    'locations',
    'members',
    'roadnames',
    'cmr_layouts',
    'cmr_pages',
    'cmr_projects',
    'nrhs_pages',
    'nrhs_projects',
]

MIDDLEWARE = [
    'cms.middleware.utils.ApphookReloadMiddleware',  # Recommended for `django-cms`
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Required by `django-cms`
    'cms.middleware.user.CurrentUserMiddleware',  # Required by `django-cms`
    'cms.middleware.page.CurrentPageMiddleware',  # Required by `django-cms`
    'cms.middleware.toolbar.ToolbarMiddleware',  # Required by `django-cms`
    'cms.middleware.language.LanguageCookieMiddleware',  # Required by `django-cms`
    'allauth.account.middleware.AccountMiddleware',  # Required by `allauth`
]

ROOT_URLCONF = 'CMR.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',  # Required by `allauth`
                'django.template.context_processors.i18n',  # Required by `django-cms`
                'sekizai.context_processors.sekizai',  # Required by `django-cms`
                'cms.context_processors.cms_settings',  # Required by `django-cms`
            ],
        },
    },
]

X_FRAME_OPTIONS = 'SAMEORIGIN'  # Recommended for `django-cms`

CMS_TEMPLATES = [  # Required by `django-cms`
    ('base.html', 'Base template w/o panels'),
    ('base_rht.html', 'Base template w panel on right'),
    ('base_lft.html', 'Base template w panmel on left'),
]
THUMBNAIL_HIGH_RESOLUTION = True  # Required by `django-cms`

THUMBNAIL_PROCESSORS = (  # Required by `django-cms`
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
)

WSGI_APPLICATION = 'CMR.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGES = [
    ('en', 'English'),
    ('de', 'German'),
    ('se', 'Swedish'),
]
LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_LIST_LEN = 10

# 'allauth' Provider specific settings
# https://docs.allauth.org/en/latest/introduction/index.html
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': env('GOOGLE_SOCIAL_AUTH_CLIENT_ID'),
            'secret': env('GOOGLE_SOCIAL_AUTH_CLIENT_SECRET'),
            'key': env('GOOGLE_SOCIAL_AUTH_CLIENT_KEY'),
        }
    }
}

# Misc. settings
ADMINS = tuple(parseaddr(email) for email in env.list('ADMINS'))
MANAGERS = tuple(parseaddr(email) for email in env.list('MANAGERS'))

# Required by `django-debug-toolbar`
INTERNAL_IPS = ['127.0.0.1']
TESTING = 'test' in sys.argv
if not TESTING:
    INSTALLED_APPS = [
        *INSTALLED_APPS,
        'debug_toolbar',
    ]
    MIDDLEWARE = [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
        *MIDDLEWARE,
    ]
# fmton
