# Generated by Django 5.0.6 on 2024-08-03 21:57

import django.db.models.deletion
import modelcluster.fields
import phonenumber_field.modelfields
import uuid
import wagtail.blocks
import wagtail.contrib.forms.models
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.models
import wagtail.search.index
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('wagtailcore', '0093_uploadedfile'),
        ('wagtailimages', '0026_delete_uploadedimage'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactForm',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'to_address',
                    models.CharField(
                        blank=True,
                        help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.',
                        max_length=255,
                        validators=[wagtail.contrib.forms.models.validate_to_address],
                        verbose_name='to address',
                    ),
                ),
                (
                    'from_address',
                    models.EmailField(blank=True, max_length=255, verbose_name='from address'),
                ),
                (
                    'subject',
                    models.CharField(blank=True, max_length=255, verbose_name='subject'),
                ),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(
                wagtail.contrib.forms.models.FormMixin,
                'wagtailcore.page',
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name='ContactSettings',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'email_cmr',
                    models.EmailField(
                        blank=True,
                        help_text='Email address for CMR',
                        max_length=254,
                        verbose_name='CMR email',
                    ),
                ),
                (
                    'email_nrhs',
                    models.EmailField(
                        blank=True,
                        help_text='Email address for NRHS',
                        max_length=254,
                        verbose_name='NRHS email',
                    ),
                ),
                (
                    'phone_cmr',
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text='Phone number for CMR',
                        max_length=128,
                        region=None,
                        verbose_name='CMR phone',
                    ),
                ),
                (
                    'phone_nrhs',
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text='Phone number for NRHS',
                        max_length=128,
                        region=None,
                        verbose_name='NRHS phone',
                    ),
                ),
                (
                    'address_cmr',
                    models.TextField(
                        blank=True,
                        help_text='Mailing address for CMR.',
                        verbose_name='CMR mailing address',
                    ),
                ),
                (
                    'address_nrhs',
                    models.TextField(
                        blank=True,
                        help_text='Mailing address for NRHS.',
                        verbose_name='NRHS mailing address',
                    ),
                ),
                (
                    'youtube',
                    models.CharField(
                        blank=True,
                        help_text='Youtube channel name without @ symbol. Example: cmr_railway.',
                        max_length=30,
                        verbose_name='Youtube',
                    ),
                ),
                (
                    'instagram',
                    models.CharField(
                        blank=True,
                        help_text='Instagram username without @ symbol. Example: cmr_railway.',
                        max_length=30,
                        verbose_name='Instagram',
                    ),
                ),
                (
                    'github',
                    models.CharField(
                        blank=True,
                        help_text='Github username without @ symbol. Example: cmr_railway.',
                        max_length=30,
                        verbose_name='Github',
                    ),
                ),
                (
                    'visit_addr',
                    models.TextField(
                        blank=True,
                        help_text='Visiting address for CMR layout and NRHS exhibits.',
                        verbose_name='Visiting address',
                    ),
                ),
                (
                    'visit_map_link',
                    models.URLField(
                        blank=True,
                        help_text='Map link for visiting address.',
                        verbose_name='Map link',
                    ),
                ),
                (
                    'open_MON',
                    models.CharField(
                        blank=True,
                        default='',
                        help_text='Visiting hours on Modays. Leave blank if not open to public. Example: 10A - 5P.',
                        max_length=10,
                        verbose_name='MON',
                    ),
                ),
                (
                    'open_TUE',
                    models.CharField(
                        blank=True,
                        default='',
                        help_text='Visiting hours on Tuesday. Leave blank if not open to public. Example: 10A - 5P.',
                        max_length=10,
                        verbose_name='TUE',
                    ),
                ),
                (
                    'open_WED',
                    models.CharField(
                        blank=True,
                        default='',
                        help_text='Visiting hours on Wednesday. Leave blank if not open to public. Example: 10A - 5P.',
                        max_length=10,
                        verbose_name='WED',
                    ),
                ),
                (
                    'open_THU',
                    models.CharField(
                        blank=True,
                        default='7P - 9P',
                        help_text='Visiting hours on Thursday.Leave blank if not open to public. Example: 10A - 5P.',
                        max_length=10,
                        verbose_name='THU',
                    ),
                ),
                (
                    'open_FRI',
                    models.CharField(
                        blank=True,
                        default='',
                        help_text='Visiting hours on Friday. Leave blank if not open to public. Example: 10A - 5P.',
                        max_length=10,
                        verbose_name='FRI',
                    ),
                ),
                (
                    'open_SAT',
                    models.CharField(
                        blank=True,
                        default='10A - 5P',
                        help_text='Visiting hours on Saturday. Leave blank if not open to public. Example: 10A - 5P.',
                        max_length=10,
                        verbose_name='SAT',
                    ),
                ),
                (
                    'open_SUN',
                    models.CharField(
                        blank=True,
                        default='2P - 5P',
                        help_text='Visiting hours on Sunday. Leave blank if not open to public. Example: 10A - 5P.',
                        max_length=10,
                        verbose_name='SUN',
                    ),
                ),
                (
                    'open_holidays',
                    models.CharField(
                        blank=True,
                        default='Holiday hours may differ.',
                        help_text="Exceptions for holidays. Example: 'Holiday hours may differ.'",
                        max_length=30,
                        verbose_name='Holidays',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserApprovalTaskState',
            fields=[
                (
                    'taskstate_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.taskstate',
                    ),
                ),
            ],
            bases=('wagtailcore.taskstate',),
        ),
        migrations.CreateModel(
            name='Advert',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('url', models.URLField(blank=True, null=True)),
                ('text', models.CharField(max_length=255)),
                (
                    'image',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
            ],
            bases=(
                wagtail.models.PreviewableMixin,
                wagtail.search.index.Indexed,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name='ContactField',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    'clean_name',
                    models.CharField(
                        blank=True,
                        default='',
                        help_text='Safe name of the form field, the label converted to ascii_snake_case',
                        max_length=255,
                        verbose_name='name',
                    ),
                ),
                (
                    'label',
                    models.CharField(
                        help_text='The label of the form field',
                        max_length=255,
                        verbose_name='label',
                    ),
                ),
                (
                    'field_type',
                    models.CharField(
                        choices=[
                            ('singleline', 'Single line text'),
                            ('multiline', 'Multi-line text'),
                            ('email', 'Email'),
                            ('number', 'Number'),
                            ('url', 'URL'),
                            ('checkbox', 'Checkbox'),
                            ('checkboxes', 'Checkboxes'),
                            ('dropdown', 'Drop down'),
                            ('multiselect', 'Multiple select'),
                            ('radio', 'Radio buttons'),
                            ('date', 'Date'),
                            ('datetime', 'Date/time'),
                            ('hidden', 'Hidden field'),
                        ],
                        max_length=16,
                        verbose_name='field type',
                    ),
                ),
                (
                    'required',
                    models.BooleanField(default=True, verbose_name='required'),
                ),
                (
                    'choices',
                    models.TextField(
                        blank=True,
                        help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.',
                        verbose_name='choices',
                    ),
                ),
                (
                    'default_value',
                    models.TextField(
                        blank=True,
                        help_text='Default value. Comma or new line separated values supported for checkboxes.',
                        verbose_name='default value',
                    ),
                ),
                (
                    'help_text',
                    models.CharField(blank=True, max_length=255, verbose_name='help text'),
                ),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='contact_fields',
                        to='base.contactform',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'to_address',
                    models.CharField(
                        blank=True,
                        help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.',
                        max_length=255,
                        validators=[wagtail.contrib.forms.models.validate_to_address],
                        verbose_name='to address',
                    ),
                ),
                (
                    'from_address',
                    models.EmailField(blank=True, max_length=255, verbose_name='from address'),
                ),
                (
                    'subject',
                    models.CharField(blank=True, max_length=255, verbose_name='subject'),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            (
                                'heading_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'heading_text',
                                            wagtail.blocks.CharBlock(
                                                form_classname='title', required=True
                                            ),
                                        ),
                                        (
                                            'size',
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ('', 'Select heading size'),
                                                    ('h2', 'H2'),
                                                    ('h3', 'H3'),
                                                    ('h4', 'H4'),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'paragraph_block',
                                wagtail.blocks.RichTextBlock(
                                    icon='pilcrow',
                                    template='blocks/paragraph_block.html',
                                ),
                            ),
                            (
                                'image_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'image',
                                            wagtail.images.blocks.ImageChooserBlock(required=True),
                                        ),
                                        (
                                            'caption',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_text',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_url',
                                            wagtail.blocks.URLBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'embed_block',
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Insert a URL to embed. For example, https://www.youtube.com/watch?v=SGJFWirQ3ks',
                                    icon='media',
                                    template='blocks/embed_block.html',
                                ),
                            ),
                        ]
                    ),
                ),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True)),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(
                wagtail.contrib.forms.models.FormMixin,
                'wagtailcore.page',
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    'clean_name',
                    models.CharField(
                        blank=True,
                        default='',
                        help_text='Safe name of the form field, the label converted to ascii_snake_case',
                        max_length=255,
                        verbose_name='name',
                    ),
                ),
                (
                    'label',
                    models.CharField(
                        help_text='The label of the form field',
                        max_length=255,
                        verbose_name='label',
                    ),
                ),
                (
                    'field_type',
                    models.CharField(
                        choices=[
                            ('singleline', 'Single line text'),
                            ('multiline', 'Multi-line text'),
                            ('email', 'Email'),
                            ('number', 'Number'),
                            ('url', 'URL'),
                            ('checkbox', 'Checkbox'),
                            ('checkboxes', 'Checkboxes'),
                            ('dropdown', 'Drop down'),
                            ('multiselect', 'Multiple select'),
                            ('radio', 'Radio buttons'),
                            ('date', 'Date'),
                            ('datetime', 'Date/time'),
                            ('hidden', 'Hidden field'),
                        ],
                        max_length=16,
                        verbose_name='field type',
                    ),
                ),
                (
                    'required',
                    models.BooleanField(default=True, verbose_name='required'),
                ),
                (
                    'choices',
                    models.TextField(
                        blank=True,
                        help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.',
                        verbose_name='choices',
                    ),
                ),
                (
                    'default_value',
                    models.TextField(
                        blank=True,
                        help_text='Default value. Comma or new line separated values supported for checkboxes.',
                        verbose_name='default value',
                    ),
                ),
                (
                    'help_text',
                    models.CharField(blank=True, max_length=255, verbose_name='help text'),
                ),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='form_fields',
                        to='base.formpage',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GalleryPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'introduction',
                    models.TextField(blank=True, help_text='Text to describe the page'),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            (
                                'heading_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'heading_text',
                                            wagtail.blocks.CharBlock(
                                                form_classname='title', required=True
                                            ),
                                        ),
                                        (
                                            'size',
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ('', 'Select heading size'),
                                                    ('h2', 'H2'),
                                                    ('h3', 'H3'),
                                                    ('h4', 'H4'),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'paragraph_block',
                                wagtail.blocks.RichTextBlock(
                                    icon='pilcrow',
                                    template='blocks/paragraph_block.html',
                                ),
                            ),
                            (
                                'image_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'image',
                                            wagtail.images.blocks.ImageChooserBlock(required=True),
                                        ),
                                        (
                                            'caption',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_text',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_url',
                                            wagtail.blocks.URLBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'embed_block',
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Insert a URL to embed. For example, https://www.youtube.com/watch?v=SGJFWirQ3ks',
                                    icon='media',
                                    template='blocks/embed_block.html',
                                ),
                            ),
                        ],
                        blank=True,
                        verbose_name='Page body',
                    ),
                ),
                (
                    'collection',
                    models.ForeignKey(
                        blank=True,
                        help_text='Select the image collection for this gallery.',
                        limit_choices_to=models.Q(('name__in', ['Root']), _negated=True),
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='wagtailcore.collection',
                    ),
                ),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        help_text='Landscape mode only; horizontal width between 1000px and 3000px.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'live',
                    models.BooleanField(default=True, editable=False, verbose_name='live'),
                ),
                (
                    'has_unpublished_changes',
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name='has unpublished changes',
                    ),
                ),
                (
                    'first_published_at',
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name='first published at',
                    ),
                ),
                (
                    'last_published_at',
                    models.DateTimeField(
                        editable=False, null=True, verbose_name='last published at'
                    ),
                ),
                (
                    'go_live_at',
                    models.DateTimeField(blank=True, null=True, verbose_name='go live date/time'),
                ),
                (
                    'expire_at',
                    models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time'),
                ),
                (
                    'expired',
                    models.BooleanField(default=False, editable=False, verbose_name='expired'),
                ),
                (
                    'locked',
                    models.BooleanField(default=False, editable=False, verbose_name='locked'),
                ),
                (
                    'locked_at',
                    models.DateTimeField(editable=False, null=True, verbose_name='locked at'),
                ),
                (
                    'first_name',
                    models.CharField(max_length=255, verbose_name='First name'),
                ),
                (
                    'last_name',
                    models.CharField(max_length=255, verbose_name='Last name'),
                ),
                (
                    'email',
                    models.EmailField(blank=True, max_length=254, verbose_name='Email'),
                ),
                (
                    'street',
                    models.CharField(blank=True, max_length=255, verbose_name='First name'),
                ),
                (
                    'city',
                    models.CharField(blank=True, max_length=255, verbose_name='First name'),
                ),
                (
                    'state',
                    models.CharField(blank=True, max_length=255, verbose_name='First name'),
                ),
                (
                    'zip',
                    models.CharField(blank=True, max_length=255, verbose_name='First name'),
                ),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
                (
                    'latest_revision',
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailcore.revision',
                        verbose_name='latest revision',
                    ),
                ),
                (
                    'live_revision',
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailcore.revision',
                        verbose_name='live revision',
                    ),
                ),
                (
                    'locked_by',
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='locked_%(class)ss',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='locked by',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
            },
            bases=(
                wagtail.models.WorkflowMixin,
                wagtail.models.PreviewableMixin,
                wagtail.search.index.Indexed,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'title_suffix',
                    models.CharField(
                        default='Carolina Model Railroaders',
                        help_text="The suffix for the title meta tag e.g. ' | Carolina Model Railroaders'",
                        max_length=255,
                        verbose_name='Title suffix',
                    ),
                ),
                (
                    'copyright_text',
                    models.TextField(
                        default='Carolina Model Railroaders, Inc.',
                        help_text='Copyright text to display in the footer.',
                    ),
                ),
                (
                    'rss_link',
                    models.URLField(
                        blank=True,
                        help_text='Link for RSS feed.',
                        verbose_name='RSS link',
                    ),
                ),
                (
                    'privacy_page',
                    models.ForeignKey(
                        blank=True,
                        help_text='Select privacy page for links in footer.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailcore.page',
                        verbose_name='Privacy page',
                    ),
                ),
                (
                    'site',
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='wagtailcore.site',
                    ),
                ),
                (
                    'terms_page',
                    models.ForeignKey(
                        blank=True,
                        help_text='Select T&Cs page for links in footer.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailcore.page',
                        verbose_name='T&Cs page',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StandardPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                ('intro', models.CharField(max_length=255)),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            (
                                'heading_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'heading_text',
                                            wagtail.blocks.CharBlock(
                                                form_classname='title', required=True
                                            ),
                                        ),
                                        (
                                            'size',
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ('', 'Select heading size'),
                                                    ('h2', 'H2'),
                                                    ('h3', 'H3'),
                                                    ('h4', 'H4'),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'paragraph_block',
                                wagtail.blocks.RichTextBlock(
                                    icon='pilcrow',
                                    template='blocks/paragraph_block.html',
                                ),
                            ),
                            (
                                'image_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'image',
                                            wagtail.images.blocks.ImageChooserBlock(required=True),
                                        ),
                                        (
                                            'caption',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_text',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_url',
                                            wagtail.blocks.URLBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'embed_block',
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Insert a URL to embed. For example, https://www.youtube.com/watch?v=SGJFWirQ3ks',
                                    icon='media',
                                    template='blocks/embed_block.html',
                                ),
                            ),
                        ],
                        blank=True,
                        help_text='Create a plain page without sidebar using RichText format.',
                        verbose_name='Page body',
                    ),
                ),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        help_text='Landscape mode only; horizontal width between 1000px and 3000px.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='UserApprovalTask',
            fields=[
                (
                    'task_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.task',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=('wagtailcore.task',),
        ),
        migrations.CreateModel(
            name='FooterText',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'translation_key',
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    'live',
                    models.BooleanField(default=True, editable=False, verbose_name='live'),
                ),
                (
                    'has_unpublished_changes',
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name='has unpublished changes',
                    ),
                ),
                (
                    'first_published_at',
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name='first published at',
                    ),
                ),
                (
                    'last_published_at',
                    models.DateTimeField(
                        editable=False, null=True, verbose_name='last published at'
                    ),
                ),
                (
                    'go_live_at',
                    models.DateTimeField(blank=True, null=True, verbose_name='go live date/time'),
                ),
                (
                    'expire_at',
                    models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time'),
                ),
                (
                    'expired',
                    models.BooleanField(default=False, editable=False, verbose_name='expired'),
                ),
                (
                    'body',
                    wagtail.fields.RichTextField(blank=True, verbose_name='Optional footer text'),
                ),
                (
                    'latest_revision',
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailcore.revision',
                        verbose_name='latest revision',
                    ),
                ),
                (
                    'live_revision',
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailcore.revision',
                        verbose_name='live revision',
                    ),
                ),
                (
                    'locale',
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='+',
                        to='wagtailcore.locale',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Footer text',
                'verbose_name_plural': 'Footer text',
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
            bases=(wagtail.models.PreviewableMixin, models.Model),
        ),
    ]
