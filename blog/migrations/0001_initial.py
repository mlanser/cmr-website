# Generated by Django 5.0.6 on 2024-08-01 23:21

import django.core.validators
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.contrib.routable_page.models
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('base', '0001_initial'),
        (
            'taggit',
            '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx',
        ),
        ('wagtailcore', '0093_uploadedfile'),
        ('wagtailimages', '0026_delete_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'date',
                    models.DateField(blank=True, null=True, verbose_name='Publish date'),
                ),
                ('subtitle', models.CharField(blank=True, max_length=255)),
                (
                    'intro',
                    models.CharField(
                        blank=True,
                        help_text='Text to describe this blog post',
                        max_length=255,
                    ),
                ),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            (
                                'heading_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'heading_text',
                                            wagtail.blocks.CharBlock(
                                                form_classname='title', required=True
                                            ),
                                        ),
                                        (
                                            'size',
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ('', 'Select heading size'),
                                                    ('h2', 'H2'),
                                                    ('h3', 'H3'),
                                                    ('h4', 'H4'),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'paragraph_block',
                                wagtail.blocks.RichTextBlock(
                                    icon='pilcrow',
                                    template='blocks/paragraph_block.html',
                                ),
                            ),
                            (
                                'image_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'image',
                                            wagtail.images.blocks.ImageChooserBlock(required=True),
                                        ),
                                        (
                                            'caption',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_text',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'credit_url',
                                            wagtail.blocks.URLBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'embed_block',
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Insert a URL to embed. For example, https://www.youtube.com/watch?v=SGJFWirQ3ks',
                                    icon='media',
                                    template='blocks/embed_block.html',
                                ),
                            ),
                        ],
                        blank=True,
                        help_text='Content for blog page using RichText format.',
                        verbose_name='Page body',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogMain',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                (
                    'about',
                    wagtail.fields.RichTextField(
                        blank=True, help_text='Text to describe this section'
                    ),
                ),
                ('about_title', models.CharField(blank=True, max_length=255)),
                (
                    'max_recent',
                    models.IntegerField(
                        default=6,
                        help_text='Max recent items to show on blog landing page',
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                        verbose_name='Max recent',
                    ),
                ),
                (
                    'about_image',
                    models.ForeignKey(
                        blank=True,
                        help_text='Landscape mode only; horizontal width between 1000px and 3000px.',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                'wagtailcore.page',
            ),
        ),
        migrations.CreateModel(
            name='BlogBannerImage',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    'caption',
                    models.CharField(
                        blank=True,
                        help_text='Optional text to display on the banner image',
                        max_length=255,
                        verbose_name='Banner text',
                    ),
                ),
                (
                    'credit_text',
                    models.CharField(
                        blank=True,
                        help_text='Image credits display below image.',
                        max_length=255,
                        verbose_name='Image credit',
                    ),
                ),
                (
                    'credit_url',
                    models.URLField(
                        blank=True,
                        help_text='URL for image credits.',
                        verbose_name='Credit URL',
                    ),
                ),
                (
                    'image',
                    models.ForeignKey(
                        blank=True,
                        help_text='Use image ratio 20:9 and max size 2000 x 900 px',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailimages.image',
                        verbose_name='Banner image',
                    ),
                ),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='banner_images',
                        to='blog.blogmain',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogGalleryImage',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    'caption',
                    models.CharField(
                        blank=True,
                        help_text='Text is used as ALT text for the image.',
                        max_length=255,
                        verbose_name='Image caption',
                    ),
                ),
                (
                    'credit_text',
                    models.CharField(
                        blank=True,
                        help_text='Image credits display below image.',
                        max_length=255,
                        verbose_name='Image credit',
                    ),
                ),
                (
                    'credit_url',
                    models.URLField(
                        blank=True,
                        help_text='URL for image credits.',
                        verbose_name='Credit URL',
                    ),
                ),
                (
                    'image',
                    models.ForeignKey(
                        help_text='Use image ratio 3:2 and max size 1200 x 800 px.',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='wagtailimages.image',
                        verbose_name='Gallery image',
                    ),
                ),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='gallery_images',
                        to='blog.blogpage',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tagged_items',
                        to='blog.blogpage',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='%(app_label)s_%(class)s_items',
                        to='taggit.tag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='blog.BlogPageTag',
                to='taggit.Tag',
                verbose_name='Tags',
            ),
        ),
        migrations.CreateModel(
            name='BlogPerson',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='blog_person_relationship',
                        to='blog.blogpage',
                    ),
                ),
                (
                    'person',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='person_blog_relationship',
                        to='base.person',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogRelatedLink',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ('name', models.CharField(max_length=255)),
                ('url', models.URLField()),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='related_links',
                        to='blog.blogpage',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
