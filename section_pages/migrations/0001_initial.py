# Generated by Django 5.0.6 on 2024-07-09 20:18

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtailmarkdown.blocks
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('base', '0001_initial'),
        (
            'taggit',
            '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx',
        ),
        ('wagtailcore', '0093_uploadedfile'),
        ('wagtailimages', '0026_delete_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='SectionTagIndexPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SectionPage',
            fields=[
                (
                    'page_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='wagtailcore.page',
                    ),
                ),
                ('date', models.DateField(verbose_name='Post date')),
                ('intro', models.CharField(max_length=250)),
                (
                    'body',
                    wagtail.fields.StreamField(
                        [
                            (
                                'heading_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'heading_text',
                                            wagtail.blocks.CharBlock(
                                                form_classname='title', required=True
                                            ),
                                        ),
                                        (
                                            'size',
                                            wagtail.blocks.ChoiceBlock(
                                                blank=True,
                                                choices=[
                                                    ('', 'Select heading size'),
                                                    ('h2', 'H2'),
                                                    ('h3', 'H3'),
                                                    ('h4', 'H4'),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'markdown_block',
                                wagtailmarkdown.blocks.MarkdownBlock(icon='code'),
                            ),
                            (
                                'image_block',
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            'image',
                                            wagtail.images.blocks.ImageChooserBlock(required=True),
                                        ),
                                        (
                                            'caption',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                        (
                                            'attribution',
                                            wagtail.blocks.CharBlock(required=False),
                                        ),
                                    ]
                                ),
                            ),
                            (
                                'embed_block',
                                wagtail.embeds.blocks.EmbedBlock(
                                    help_text='Insert a URL to embed. For example, https://www.youtube.com/watch?v=SGJFWirQ3ks',
                                    icon='media',
                                ),
                            ),
                        ],
                        blank=True,
                        help_text='Create a landing/main page for a section using Markdown.',
                    ),
                ),
                (
                    'authors',
                    modelcluster.fields.ParentalManyToManyField(blank=True, to='base.author'),
                ),
                (
                    'feed_image',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SectionPageGalleryImage',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ('caption', models.CharField(blank=True, max_length=250)),
                (
                    'image',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='wagtailimages.image',
                    ),
                ),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='gallery_images',
                        to='section_pages.sectionpage',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SectionPageRelatedLink',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'sort_order',
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ('name', models.CharField(max_length=250)),
                ('url', models.URLField()),
                (
                    'page',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='related_links',
                        to='section_pages.sectionpage',
                    ),
                ),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SectionPageTag',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'content_object',
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tagged_items',
                        to='section_pages.sectionpage',
                    ),
                ),
                (
                    'tag',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='%(app_label)s_%(class)s_items',
                        to='taggit.tag',
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sectionpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text='A comma-separated list of tags.',
                through='section_pages.SectionPageTag',
                to='taggit.Tag',
                verbose_name='Tags',
            ),
        ),
    ]
